单例模式顾名思义，就是只有一个实例  只能被实例化一次。作为对象的创建模式， 单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例！

三个特点：
一是某个类只能有一个实例；
二是它必须自行创建这个实例；
三是它必须自行向整个系统提供这个实例。

原理分析：
我们发现单例模式实例化是在自己内部的静态方法当中实例化的 那么也就会把该对象存储到了静态化初始段当中；所以我们不管是声明多少个$a或者$b 那么都是代表的同一个实例化对象！

<?php
class man{
    //将实例化的对象保存在该属性下
    private static $_instance;
    public $username;

    //构造函数私有化 防止被多次实例化
    private function __construct()
    {
        //啥也不用写
    }
    //这个方法必须是公共的因为我们需要在类的外表来读取到它  另外必须是静态的 因为无法实例化此类 只能在类的内部自己实例化自己  所以必须是静态的才方便我们在类外边man::get_instance来访问
    public static function get_instance(){
        //判断静态属性$_instances是否为null  如果为null 说明是第一次实例化(并且也只能被实例化一次)
        if(self::$_instance == null){
            self::$_instance = new man();//将对象存储到静态的成员属性当中去
        }
        return self::$_instance;//如果静态属性方法$_instance已经存在 那么我们不再实例化 直接返回这个静态的成员属性
    }

    //阻止用户复制对象实例  私有化的 就不会被复制了！
    private  function __clone()
    {
        // TODO: Implement __clone() method.
        trigger_error('想复制？没门!');
    }

    //应用方法  设置用户名称
    public function set_name($username)
    {
        $this->username = $username;
    }

    //应用方法  输出用户名称
    public function get_username()
    {
        return $this->username;
    }
}
$a = man::get_instance();
$a->set_name('胡绍良');
$username = $a->get_username();
print_r($username);
unset($a);

$b = man::get_instance();
$name = $b->get_username();
print_r($name);die;

?>

$a 和 $b 其实代表的是同一个对象  $a只是一个标识  $b 也是  我们销毁了$a 这是断开了和内存当中对象之间的联系 $b还是和内存当中的对象存在关联！
我们用$a设置的一些值也是存储到了静态化初始段当中  所以$b一样是可以访问到的！
